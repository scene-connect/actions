name: Update dependencies
on:
  workflow_call:
    inputs:
      python-version:
        default: "3.12"
        required: false
        type: string
      target_branch:
        description: 'Target release branch to update dependencies on (e.g., release/1.0.0)'
        required: true
        type: string
      dependencies:
        description: 'Dependencies to update in JSON format (e.g., {"zuos-types": "1.0.0rc1", "zuos-utilities": "1.0.0rc5"})'
        required: true
        type: string
    secrets:
      GOOGLE_AUTHENTICATION_CREDENTIALS_JSON:
        description: "Google Cloud Platform service-agent JSON credentials for accessing our Artifact Repository and installing private packages."
        required: false

jobs:
  update-dependencies:
    runs-on: ubuntu-22.04
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        env:
          GOOGLE_AUTHENTICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_AUTHENTICATION_CREDENTIALS_JSON }}
        if: ${{ env.GOOGLE_AUTHENTICATION_CREDENTIALS_JSON != '' }}
        with:
          credentials_json: ${{ secrets.GOOGLE_AUTHENTICATION_CREDENTIALS_JSON }}

      - name: Install dependencies
        uses: scene-connect/actions/python-package-manager/install-dependencies@v5
        with:
          package-manager: poetry
          python-version: ${{ inputs.python-version }}

      - name: Validate dependencies JSON
        run: |
          set -euo pipefail
          # Write dependencies to file.
          cat << 'EOF' > dependencies.json
          ${{ inputs.dependencies }}
          EOF

          echo "=== Validating Dependencies Input ==="
          # Validate JSON format
          if ! jq empty dependencies.json; then
            echo "Error: Invalid JSON format in dependencies input"
            rm -f dependencies.json
            exit 1
          fi

          echo "Dependencies to update:"
          jq . dependencies.json


      - name: Parse and update dependencies
        run: |
          set -euo pipefail
          echo "=== Parsing Dependencies Input ==="

          # Parse JSON and extract dependency@version pairs and input to individual lines of tmp file.
          jq -r 'to_entries[] | "\(.key)@\(.value)"' dependencies.json > dependency_list.tmp


          # Iterate through each line of tmp_file
          while IFS= read -r dependency_spec; do
            echo "Updating $dependency_spec"
            # Update the dependency using poetry
            if poetry add "$dependency_spec"; then
              echo "Successfully updated $dependency_spec"
            else
              echo "Failed to update $dependency_spec"
              rm -f dependencies.json dependency_list.tmp
              exit 1
            fi
            echo ""
          done < dependency_list.tmp
          echo "=== All Dependencies Updated ==="
          rm -f dependencies.json dependency_list.tmp

      - name: Set hotfix branch name
        run: |
          VERSION="${{ inputs.target_branch }}"
          VERSION="${VERSION#release/}"
          echo "HOTFIX_BRANCH=hotfix/version-updates-$VERSION" >> $GITHUB_ENV

      - name: Create Pull Request
        id: pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'Update dependencies for ${{ inputs.target_branch }}'
          title: 'Dependency updates: ${{ env.HOTFIX_BRANCH }}'
          body: |
            ## Dependency Updates for ${{ inputs.target_branch }}

            This PR updates the following dependencies:

            ```json
            ${{ inputs.dependencies }}
            ```
          branch: ${{ env.HOTFIX_BRANCH }}
          base: ${{ inputs.target_branch }}
          delete-branch: true

      - name: Print URL
        if: ${{ steps.pr.outputs.pull-request-url }}
        run: |
          echo "Pull Request URL - ${{ steps.pr.outputs.pull-request-url }}"
