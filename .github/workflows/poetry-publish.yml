name: Poetry publish package
on:
  workflow_call:
    inputs:
      python-version:
        default: "3.11"
        required: false
        type: string
      repository:
        default: "zuos-python-repo"
        required: false
        type: string
      location:
        default: "europe-north1"
        required: false
        type: string
    secrets:
      GOOGLE_AUTHENTICATION_CREDENTIALS_JSON:
        description: "Google Cloud Platform service-agent JSON credentials for accessing our Artifact Repository and installing private packages."
        required: false

jobs:
  diff:
    # Check for changes which should trigger a new build/publish
    runs-on: ubuntu-latest
    outputs:
      src_changed: ${{ steps.diff.outputs.count }}
    steps:
      - uses: actions/checkout@v3
      - uses: technote-space/get-diff-action@v6
        id: diff
        with:
          PATTERNS: |
            src/**/*
          FILES: |
            pyproject.toml
            poetry.lock

  versions:
    # Gets the package version from the base and head branches.
    runs-on: ubuntu-latest
    outputs:
      version_base: ${{ steps.version-base.outputs.version }}
      version_head: ${{ steps.version-head.outputs.version }}
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - run: pipx install poetry
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
      - name: Get base package version
        id: version-base
        run: echo "version=`poetry version --short --no-interaction`" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name: Get head package version
        id: version-head
        run: echo "version=`poetry version --short --no-interaction`" >> $GITHUB_OUTPUT

  bump-version:
    # Bumps the package version, if not already changed from the base branch.
    runs-on: ubuntu-latest
    needs: [diff, versions]
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      commit_long_sha: ${{ steps.commit.outputs.commit_long_sha }}
    # Only bump for pull requests, where src/deps have changed, and either for
    # dependabot PRs or when PR title begins with the version level to bump.
    if: |
      github.event_name == 'pull_request'
      && needs.diff.outputs.src_changed > 0
      && needs.versions.outputs.version_base == needs.versions.outputs.version_head
      && (
        github.actor == 'dependabot[bot]'
        || startsWith(github.event.pull_request.title, 'Patch')
        || startsWith(github.event.pull_request.title, 'Minor')
        || startsWith(github.event.pull_request.title, 'Major')
      )
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - run: pipx install poetry
      - name: Patch
        if: github.actor == 'dependabot[bot]' || startsWith(github.event.pull_request.title, 'Patch')
        run: poetry version patch --no-interaction
      - name: Minor
        if: startsWith(github.event.pull_request.title, 'Minor')
        run: poetry version minor --no-interaction
      - name: Major
        if: startsWith(github.event.pull_request.title, 'Major')
        run: poetry version major --no-interaction
      - name: Commit
        uses: EndBug/add-and-commit@v9
        id: commit
        with:
          add: "pyproject.toml poetry.lock"
          message: "Auto-bump package version."
      - name: Get new version
        id: get-version
        run: echo "version=`poetry version --short --no-interaction`" >> $GITHUB_OUTPUT

  build:
    # Check that the package builds successfully.
    # Do not cache the build, as at this stage the version may not be bumped,
    # and we re-build when publishing anyway.
    runs-on: ubuntu-latest
    needs: [diff, bump-version]
    outputs:
      package_name: ${{ steps.package_name.outputs.package_name }}
      version: ${{ steps.output-version.outputs.version }}
    # Run even if bump-version skipped, but not on failures.
    if: |
      always()
      && needs.diff.outputs.src_changed > 0
      && !contains(needs.*.result, 'failure')
      && !contains(needs.*.result, 'cancelled')
    steps:
      - name: Checkout
        if: needs.bump-version.result == 'skipped'
        uses: actions/checkout@v3
      - name: Checkout bumped version
        if: needs.bump-version.result == 'success'
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump-version.outputs.commit_long_sha }}
      - uses: scene-connect/actions/python-package-manager/install-dependencies@v2
        with:
          package-manager: poetry
          python-version: ${{ inputs.python-version }}
      - name: Build
        run: poetry build --no-interaction
      - name: Output package name
        id: package_name
        run: echo "package_name=`poetry version --no-interaction | grep -Po '^([\w-]+)(?=\s+.*)'`" >> $GITHUB_OUTPUT
      - name: Output version
        id: output-version
        run: echo "version=`poetry version --short --no-interaction`" >> $GITHUB_OUTPUT

  repo-version-check:
    runs-on: ubuntu-latest
    needs: [diff, bump-version, build]
    # Run even if bump-version skipped, but not on failures.
    if: |
      always()
      && needs.diff.outputs.src_changed > 0
      && !contains(needs.*.result, 'failure')
      && !contains(needs.*.result, 'cancelled')
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_AUTHENTICATION_CREDENTIALS_JSON }}
      - name: Get version description in Google Artifact Registry
        id: artifact_registry
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "description<<$EOF" >> $GITHUB_OUTPUT
          echo "`gcloud artifacts versions describe \
          ${{ needs.build.outputs.version }} \
          --package=${{ needs.build.outputs.package_name }} \
          --repository=${{ inputs.repository }} \
          --location=${{ inputs.location }} \
          `" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
      - name: Check version
        if: contains(steps.artifact_registry.outputs.description, 'createTime')
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed(
              "Package version ${{ needs.build.outputs.version }} already exists in the artifact registry!"
            )

  publish:
    runs-on: ubuntu-latest
    needs: [build, repo-version-check]
    # Run even if bump-version skipped, but not on failures.
    if: |
      always()
      && needs.diff.outputs.src_changed > 0
      && !contains(needs.*.result, 'failure')
      && !contains(needs.*.result, 'cancelled')
      && (github.event_name == 'workflow_dispatch'
        || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      )
    steps:
      - uses: actions/checkout@v3
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_AUTHENTICATION_CREDENTIALS_JSON }}
      - name: Install dependencies
        uses: scene-connect/actions/python-package-manager/install-dependencies@v2
        with:
          package-manager: poetry
          python-version: ${{ inputs.python-version }}
      - name: Publish
        run: poetry publish --build --repository=${{ inputs.repository }} --no-interaction -vvv
