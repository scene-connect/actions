name: Python linting
on:
  workflow_call:
    secrets:
      PIPENV_SSH_KEH:
        description: SSH key to use when installing with pipenv for private dependencies.
        required: false
    inputs:
      black:
        default: true
        description: Run black
        required: false
        type: boolean
      flake8:
        default: true
        description: Run flake8
        required: false
        type: boolean
      isort:
        default: true
        description: Run isort
        required: false
        type: boolean
      mypy:
        default: true
        description: Run mypy
        required: false
        type: boolean

      mypy-dot-env:
        required: false
        type: string
      mypy-system-dependencies:
        required: false
        type: string
      package-manager:
        default: pipenv
        description: Package manager to use (pip or pipenv)
        required: false
        type: string
      python-version:
        default: "3.10"
        required: false
        type: string
      requirements-files:
        default: requirements.txt
        description: Space-separated list of requirements files if using pip
        required: false
        type: string

jobs:
  black:
    if: inputs.black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: psf/black@stable

  flake8:
    if: inputs.flake8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}
      - run: python -m pip install flake8
      - name: Run flake8
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: flake8
          run: python -m flake8

  isort:
    if: inputs.isort
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          cache: ${{ inputs.package-manager }}
          python-version: ${{ inputs.python-version }}
      # Make sure there is some version of isort in case it's not a listed dependency.
      - name: Install isort
        run: pip install isort
      - name: Set pipenv SSH key from secrets
        env:
          PIPENV_SSH_KEH: ${{ secrets.PIPENV_SSH_KEH }}
        if: inputs.package-manager == 'pipenv' && ${{ env.PIPENV_SSH_KEH != '' }}
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.PIPENV_SSH_KEH }}
      - name: Install pipenv requirements
        if: inputs.package-manager == 'pipenv'
        run: pip install pipenv && pipenv install --dev
      - name: Install pip requirements
        if: inputs.package-manager == 'pip'
        run: pip install -r ${{ inputs.requirements-files }}
      - name: Run isort (pip)
        if: inputs.package-manager == 'pip'
        run: python -m isort --check-only --diff .
      - name: Run isort (pipenv)
        if: inputs.package-manager == 'pipenv'
        run: pipenv run isort --check-only --diff .
      - name: Run isort (pip)
        if: inputs.package-manager == 'pip'
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: isort
          run: python -m isort --check-only --diff .
      - name: Run isort (pipenv)
        if: inputs.package-manager == 'pipenv'
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: isort
          run: pipenv run python -m isort --check-only --diff .

  mypy:
    if: inputs.mypy
    runs-on: ubuntu-latest
    steps:
      - name: Install system dependencies
        if: ${{ inputs.mypy-system-dependencies }}
        run: |
          sudo apt-get -y update
          sudo apt-get -y install --no-install-recommends ${{ inputs.mypy-system-dependencies }}
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          cache: ${{ inputs.package-manager }}
          python-version: ${{ inputs.python-version }}
      - name: Set up environment
        if: ${{ inputs.mypy-dot-env }}
        run: cp ${{ inputs.mypy-dot-env }} .env
      # Make sure there is some version of mypy in case it's not a listed dependency.
      - name: Install mypy
        run: pip install mypy
      - name: Set pipenv SSH key from secrets
        env:
          PIPENV_SSH_KEH: ${{ secrets.PIPENV_SSH_KEH }}
        if: inputs.package-manager == 'pipenv' && ${{ env.PIPENV_SSH_KEH != '' }}
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.PIPENV_SSH_KEH }}
      - name: Install pipenv requirements
        if: inputs.package-manager == 'pipenv'
        run: pip install pipenv && pipenv install --dev
      - name: Install pip requirements
        if: inputs.package-manager == 'pip'
        run: pip install -r ${{ inputs.requirements-files }}
      - name: Load mypy cache
        id: mypy-cache
        uses: actions/cache@v2
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}
      - name: Run mypy (pip)
        if: inputs.package-manager == 'pip'
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: mypy
          run: python -m mypy --show-column-numbers
      - name: Run mypy (pipenv)
        if: inputs.package-manager == 'pipenv'
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: mypy
          run: pipenv run python -m mypy --show-column-numbers
