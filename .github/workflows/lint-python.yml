name: Python linting
on:
  workflow_call:
    inputs:
      black:
        default: true
        description: Run black
        required: false
        type: boolean
      django-upgrade:
        default: true
        description: Run django-upgrade
        required: false
        type: boolean
      flake8:
        default: true
        description: Run flake8
        required: false
        type: boolean
      isort:
        default: true
        description: Run isort
        required: false
        type: boolean
      mypy:
        default: true
        description: Run mypy
        required: false
        type: boolean
      pyright:
        default: false
        description: Run pyright
        required: false
        type: boolean
      pyupgrade:
        default: true
        description: Run pyupgrade
        required: false
        type: boolean
      reorder-python-imports:
        default: true
        description: Run reorder-python-imports
        required: false
        type: boolean
      ruff:
        default: false
        description: Run ruff
        required: false
        type: boolean

      django-version:
        default: "4.2"
        required: false
        type: string
      mypy-dot-env:
        required: false
        type: string
      system-dependencies:
        required: false
        type: string
      package-manager:
        default: pipenv
        description: Package manager to use (pip, pipenv or poetry)
        required: false
        type: string
      python-version:
        default: "3.11"
        required: false
        type: string
      requirements-files:
        default: requirements.txt
        description: Space-separated list of requirements files if using pip
        required: false
        type: string

jobs:
  black:
    if: inputs.black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: psf/black@stable

  django-upgrade:
    if: inputs.django-upgrade
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install django-upgrade
        run: pip install django-upgrade
      - name: Run django-upgrade
        run: git ls-files -- '*.py' | xargs django-upgrade --target-version ${{ inputs.django-version }}

  flake8:
    if: inputs.flake8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - run: python -m pip install flake8
      - name: Run flake8
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: flake8
          run: python -m flake8

  isort:
    if: inputs.isort
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          cache: ${{ inputs.package-manager }}
          python-version: ${{ inputs.python-version }}
      # Make sure there is some version of isort in case it's not a listed dependency.
      - name: Install isort
        run: pip install isort
      - name: Install dependencies
        uses: scene-connect/actions/install-dependencies@install-dependencies
        with:
          package-manager: ${{ inputs.package-manager }}
          python-version: ${{ inputs.python-version }}
          requirements-files: ${{ inputs.requirements-files }}
          system-dependencies: ${{ inputs.system-dependencies }}
      - name: Run isort
        run: python -m isort --check-only --diff .

  mypy:
    if: inputs.mypy
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        uses: scene-connect/actions/install-dependencies@install-dependencies
        with:
          package-manager: ${{ inputs.package-manager }}
          python-version: ${{ inputs.python-version }}
          requirements-files: ${{ inputs.requirements-files }}
          system-dependencies: ${{ inputs.system-dependencies }}
      - name: Set up environment
        if: ${{ inputs.mypy-dot-env }}
        run: cp ${{ inputs.mypy-dot-env }} .env
      # Make sure there is some version of mypy in case it's not a listed dependency.
      - name: Install mypy
        run: pip install mypy
      - name: Load mypy cache
        id: mypy-cache
        uses: actions/cache@v2
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}
      - name: Run mypy
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: mypy
          run: python -m mypy --show-column-numbers

  pyright:
    if: inputs.pyright
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        uses: scene-connect/actions/install-dependencies@install-dependencies
        with:
          package-manager: ${{ inputs.package-manager }}
          python-version: ${{ inputs.python-version }}
          requirements-files: ${{ inputs.requirements-files }}
          system-dependencies: ${{ inputs.system-dependencies }}
      # Make sure there is some version of pyright in case it's not a listed dependency.
      - name: Install pyright
        run: pip install pyright
      - name: Run pyright
        run: python -m pyright
        shell: bash

  pyupgrade:
    if: inputs.pyupgrade
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install pyupgrade
        run: pip install pyupgrade
      - name: Run pyupgrade
        run: git ls-files -- '*.py' | xargs pyupgrade --py`echo ${{ inputs.python-version }} | tr -d .`-plus

  reorder-python-imports:
    if: inputs.reorder-python-imports
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install reorder-python-imports
        run: pip install reorder-python-imports
      - name: Run reorder-python-imports
        run: git ls-files -- '*.py' | xargs reorder-python-imports --py`echo ${{ inputs.python-version }} | tr -d .`-plus

  ruff:
    if: inputs.ruff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: chartboost/ruff-action@v1
